name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      displayName: 'Install SSH Key'
      inputs:
        knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshKeySecureFile: 'id_rsa'
    # - task: NewmanPostman@4
    #   displayName: 'Postman Regression Test'
    #   inputs:
    #     collectionSourceType: 'file'
    #     collectionFileSource: 'postman/'
    #     Contents: '**/Q3_regression_test.postman_collection.json'
    #     environment: 'postman/Q3.postman_environment.json'
    #     reporters: 'cli'
    # - task: NewmanPostman@4
    #   displayName: 'Postman Validation Test'
    #   inputs:
    #     collectionSourceType: 'file'
    #     collectionFileSource: 'postman/'
    #     Contents: '**/Q3_data_validation_test.postman_collection.json'
    #     environment: 'postman/Q3.postman_environment.json'
    #     reporters: 'cli'

    # - task: TerraformTaskV2@2
    #   displayName: 'Terraform Init'
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     backendServiceArm: 'myazuresub'
    #     backendAzureRmResourceGroupName: 'rg_default'
    #     backendAzureRmStorageAccountName: 'qzstore1'
    #     backendAzureRmContainerName: 'qzcontainer1'
    #     backendAzureRmKey: 'terraform.tfstate'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        
    # - task: TerraformTaskV2@2
    #   displayName: 'Terraform Apply'
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     environmentServiceNameAzureRM: 'myazuresub'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # - task: TerraformTaskV2@2
    #   displayName: 'Terraform Destroy'
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     environmentServiceNameAzureRM: 'myazuresub'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'myazuresub'
              appName: 'qzapp-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: 'VM Deploy'
    environment:
      name:  'TEST'
      resourceType: VirtualMachine
      # tags: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              workingDirectory: $(System.DefaultWorkingDirectory)
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                export PATH=$PATH:some/path
                python3 -c "import selenium; print('Selenium location:', selenium.__file__)"
                chromium-browser -version
                wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                pwd
                python3 /home/azureuser/azagent/_work/1/s/Q3_v2.py
                
          # - task: PythonScript@0
          #   inputs:
          #     scriptSource: 'filePath'
          #     scriptPath: '/home/azureuser/azagent/_work/1/s/Q3_v2.py'
          # - task: PythonScript@0
          #   inputs:
          #     scriptSource: 'filePath'
          #     scriptPath: 'selenium/Q3_v2.py'
          # - task: PythonScript@0
          #   inputs:
          #     scriptSource: 'inline'
          #     workingDirectory: $(System.DefaultWorkingDirectory)
          #     script: |
          #       import os
          #       print(os.getcwd())
          #       os.chdir('/home/azureuser/azagent/_work/1/s')
          #       print(os.getcwd())
                
          #       from selenium import webdriver
                
          #       url = "https://www.saucedemo.com/"
          #       LOG_FILE = "/var/logs/selenium/selenium_log.txt"
                
          #       options = webdriver.ChromeOptions()
          #       options.add_argument("--headless") 
                
                
          #       def login (user, password):
          #           print ('Starting the browser...')
          #           driver = webdriver.Chrome(options=options)
          #           print ('Starting login with ', user, ' and ', password)
          #           driver.get(url)
          #           driver.find_element_by_id("user-name").send_keys(user)
          #           driver.find_element_by_id("password").send_keys(password)
          #           driver.find_element_by_id("login-button").click()
                
          #           print("User successfully logged in")
                
          #           inventory_items = driver.find_elements_by_class_name("inventory_item")
          #           for item in inventory_items:
          #               title = item.find_element_by_class_name("inventory_item_name").text
          #               item.find_element_by_css_selector("button[class='btn btn_primary btn_small btn_inventory']").click()
          #               print("Adding... ", title, " to the cart")
                    
          #           print('Finished adding all items to the cart')
                
          #           print("Go to shopping car...")
          #           driver.find_element_by_class_name("shopping_cart_link").click()
          #           print('on cart page')
                
          #           cart_item = driver.find_elements_by_class_name("cart_item")
          #           for item in cart_item:
          #               title = item.find_element_by_class_name("inventory_item_name").text
          #               item.find_element_by_css_selector("button[class='btn btn_secondary btn_small cart_button']").click()
          #               print("Removing...  ", title, " from the cart")
                    
          #           print('Finished removing all items in the cart')
